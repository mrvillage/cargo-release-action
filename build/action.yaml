# Heavily inspired by https://github.com/crate-ci/cargo-release/blob/19a59b29d8864d1ce1c239c40e563dda1f46a7e9/.github/workflows/post-release.yml
# See https://github.com/mrvillage/cargo-release-action for more info

name: "cargo-release-action: build-release"
description: "A GitHub Action for creating releases with cargo-release"

inputs:
  bin_name: 
    description: "The name of the binary to be released"
    required: true
  release_version:
    description: "The version of the release"
    required: true
  upload_url:
    description: "The URL to upload the release assets to"
    required: true
  target:
    description: "The target to build for"
    required: true
  os:
    description: "The operating system to build for"
    required: true
  rust:
    description: "The rust channel to use"
    required: true
    default: stable
  github_token:
    description: "The GitHub token to use"
    required: true

runs:
  using: composite
  steps:
  - name: Checkout repository
    uses: actions/checkout@v3
    with:
      fetch-depth: 1
  - name: Install packages (Ubuntu)
    shell: bash
    if: env.RUNNER_OS == 'Linux'
    run: |
      sudo apt-get update
      sudo apt-get install -y --no-install-recommends xz-utils liblz4-tool libssl-dev
  - name: Install Rust
    uses: actions-rs/toolchain@v1
    with:
      toolchain: ${{ inputs.rust }}
      override: true
      profile: minimal
      target: ${{ inputs.target }}
  - name: Build release binary
    shell: bash
    run: cargo build --target ${{ inputs.target }} --verbose --release
  - name: Build archive
    shell: bash
    run: |
      outdir="./target/${{ env.TARGET_DIR }}/release"
      staging="${{ env.BIN_NAME }}-${{ needs.create-release.outputs.release_version }}-${{ matrix.target }}"
      mkdir -p "$staging"/{complete,doc}
      cp {README.md,LICENSE} "$staging/"
      cp CHANGELOG.md "$staging/doc/"
      if [ "${{ matrix.os }}" = "windows-2019" ]; then
        cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}.exe" "$staging/"
        cd "$staging"
        7z a "../$staging.zip" .
        echo "ASSET=$staging.zip" >> $GITHUB_ENV
      else
        cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "$staging/"
        tar czf "$staging.tar.gz" -C "$staging" .
        echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
      fi
  - name: Upload release archive
    uses: actions/upload-release-asset@v1.0.2
    env:
      GITHUB_TOKEN: ${{ inputs.github)token }}
    with:
      upload_url: ${{ needs.create-release.outputs.upload_url }}
      asset_path: ${{ env.ASSET }}
      asset_name: ${{ env.ASSET }}
      asset_content_type: application/octet-stream
