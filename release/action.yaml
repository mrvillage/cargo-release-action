# Heavily inspired by https://github.com/crate-ci/cargo-release/blob/19a59b29d8864d1ce1c239c40e563dda1f46a7e9/.github/workflows/post-release.yml
# See https://github.com/mrvillage/cargo-release-action for more info

name: "cargo-release-action: create-release"
description: "A GitHub Action for creating releases with cargo-release"

inputs:
  release_version:
    description: "The version of the release"
    default: ""
    required: true
  github_token:
    description: "The GitHub token to use"
    required: true

outputs:
  upload_url: 
    description: "The URL to upload the release assets to"
    value: ${{ steps.create-release.outputs.upload_url }}}
  release_version: 
    description: "The version of the release"
    value: ${{ env.RELEASE_VERSION }}

runs:
  using: composite
  steps:
    - name: Get the release version from the tag
      shell: bash
      if: inputs.release_version == ''
      run: |
        echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "RELEASE_VERSION=$(echo "${{ env.RELEASE_VERSION }}" | sed 's/.*v/v/')" >> $GITHUB_ENV
        echo "release_version=${{ env.RELEASE_VERSION }}" >> $GITHUB_OUTPUT
        echo "version is: ${{ env.RELEASE_VERSION }}"
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Generate Release notes
      shell: bash
      run: |
        wget -qO- https://raw.githubusercontent.com/mrvillage/cargo-release-action/9d8dbe1dbd00f974ade1b3ea045730dc353fecfc/release-notes.py | /usr/bin/env python3 - --tag ${{ env.RELEASE_VERSION }} --output notes-${{ env.RELEASE_VERSION }}.md
        cat notes-${{ env.RELEASE_VERSION }}.md
    - name: Create release
      uses: actions/github-script@v6
      id: create-release
      with: 
        github-token: ${{ inputs.github_token }}
        script: |
          try {
            const response = await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: process.env.RELEASE_VERSION,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: process.env.RELEASE_VERSION,
            });
            core.setOutput('upload_url', response.data.upload_url);
          } catch (error) {
            core.setFailed(error.message);
          }
